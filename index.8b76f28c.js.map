{"mappings":"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","sources":["src/js/index.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n// import $ from 'jquery';\n// import Pagination from 'paginationjs';\n// import 'paginationjs/dist/pagination.min.js';\n\nconst container = document.querySelector('.gallery-start');\nconst form = document.querySelector('.search-form');\nconst inputElement = document.querySelector('input[name=\"searchQuery\"]');\nconst formTextContainer = document.querySelector('.form-text');\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '9658d89d84efdefd667887b926d66a88';\n\nform.addEventListener('submit', fetchSerchForm);\n\nconst genres = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nasync function fetchMovie(inputValue) {\n  try {\n    const response = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        api_key: KEY,\n        query: inputValue,\n        page: 1,\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('There was an error!', error);\n    throw error;\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    Notiflix.Report('Error', 'An error occurred while fetching movie details');\n  }\n}\n\nasync function fetchSerchForm(evt) {\n  evt.preventDefault();\n\n  const inputValue = inputElement.value.toLowerCase().trim();\n\n  try {\n    const movies = await fetchMovie(inputValue);\n\n    if (movies.results.length === 0) {\n      formTextContainer.innerHTML =\n        'Search result not successful.<br/> Enter the correct movie name.';\n\n      Notiflix.Notify.info('Sorry, but nothing was found for your request');\n      setTimeout(function () {\n        formTextContainer.innerHTML = '';\n      }, 3000);\n    } else {\n      renderMovie(movies);\n      clearValue();\n\n      // додати обробник події на контейнер з фільмами\n      container.addEventListener('click', async event => {\n        const movieElement = event.target.closest('.img-start');\n        if (movieElement) {\n          const movieId = movieElement.dataset.id;\n          const movie = await fetchMovieDetails(movieId);\n          showModal(movie);\n        }\n      });\n    }\n  } catch (error) {\n    Notiflix.Notify.failure(error);\n    throw error;\n  }\n}\n\nasync function renderMovie(movies) {\n  const movieHTML = movies.results\n    .filter(movie => movie.poster_path) // фільтруємо тільки фільми з постером\n    .map(\n      movie => `\n      <div class=\"movie-start_container\">\n        <div class=\"movie-start\">\n          ${\n            movie.poster_path\n              ? `<img class=\"img-start\" data-id=\"${\n                  movie.id\n                }\" src=\"https://image.tmdb.org/t/p/w500${\n                  movie.poster_path\n                }\" alt=\"${movie.original_title || 'Movie Poster'} Poster\" />`\n              : ''\n          }\n          <div class=\"movie-details_start\">\n            <h2>${movie.original_title}</h2>\n            <p> ${new Date(movie.release_date).getFullYear()}</p>\n            <p> ${movie.genre_ids.map(id => genres[id]).join(', ')}</p>\n          </div>\n        </div>\n      </div>\n    `\n    )\n    .join('');\n\n  container.innerHTML = movieHTML;\n}\n\n// ======modal=====\n\nfunction showModal(movie) {\n  const modalDetails = document.querySelector('.movie-details_modal');\n\n  modalDetails.innerHTML = `\n    <div class=\"modal__list\">\n      <img class=\"img-modal\" src=\"https://image.tmdb.org/t/p/w500${\n        movie.poster_path\n      }\" alt=\"${movie.original_title} Poster\">\n      <div class=\"modal__text\">\n        <h2>${movie.original_title}</h2>\n        <p>Vote / Votes: ${movie.vote_average} / ${movie.vote_count}</p>\n        <p>Popularity: ${movie.popularity}</p>\n        <p>Original Title: ${movie.original_title}</p>\n        <p>Genre: ${\n          Array.isArray(movie.genres)\n            ? movie.genres.map(genre => genre.name).join(', ')\n            : ''\n        }</p>\n        <p class=\"abaut\"> ABOUT </p> \n        <p>  Description: ${movie.overview}</p> <!-- Доданий опис -->\n        <div class=\"modal__buttons\"> \n          <button class=\"modal__button-watched\">ADD TO WATCHED</button>\n          <button class=\"modal__button-queue\">ADD TO QUEUE</button>\n        </div>\n      </div>\n    </div>\n  `;\n\n  const modal = document.querySelector('.modal');\n  modal.style.display = 'block';\n\n  click(movie);\n}\n\nfunction click(movie) {\n  const watchedBtn = document.querySelector('.modal__button-watched');\n  const queueBtn = document.querySelector('.modal__button-queue');\n\n  // =watchedBtn при натисканні на кнопку первіряє по ід чи є фільм в локал та змінює напис кнопки\n\n  const storedWatchedMovies =\n    JSON.parse(localStorage.getItem('watchMovies')) || [];\n\n  const isWatchedMovieExists = storedWatchedMovies.some(\n    storedMovie => storedMovie.id === movie.id\n  );\n  if (isWatchedMovieExists) {\n    watchedBtn.textContent = 'REMOVE FROM WATCHED';\n  } else {\n    watchedBtn.textContent = 'ADD TO WATCHED';\n  }\n\n  watchedBtn.addEventListener('click', () => {\n    let storedMovies = JSON.parse(localStorage.getItem('watchMovies')) || [];\n\n    const isMovieExists = storedMovies.some(\n      storedMovie => storedMovie.id === movie.id\n    );\n\n    if (isMovieExists) {\n      storedMovies = storedMovies.filter(\n        storedMovie => storedMovie.id !== movie.id\n      );\n      Notiflix.Notify.info('movie removed from watched');\n      watchedBtn.textContent = 'ADD TO WATCHED';\n    } else {\n      storedMovies.push(movie);\n      Notiflix.Notify.success('Movie added to watch');\n      watchedBtn.textContent = 'REMOVE FROM WATCHED';\n    }\n\n    localStorage.setItem('watchMovies', JSON.stringify(storedMovies));\n  });\n\n  // = queueBtn\n\n  const storedQueueMovies =\n    JSON.parse(localStorage.getItem('queueMovies')) || [];\n\n  const isQueueMovieExists = storedQueueMovies.some(\n    storedMovie => storedMovie.id === movie.id\n  );\n  if (isQueueMovieExists) {\n    queueBtn.textContent = 'REMOVE FROM WATCHED';\n  } else {\n    queueBtn.textContent = 'ADD TO WATCHED';\n  }\n\n  queueBtn.addEventListener('click', () => {\n    let storedQueueMovies =\n      JSON.parse(localStorage.getItem('queueMovies')) || [];\n\n    const isMovieExists = storedQueueMovies.some(\n      storedMovie => storedMovie.id === movie.id\n    );\n\n    if (isMovieExists) {\n      storedQueueMovies = storedQueueMovies.filter(\n        storedMovie => storedMovie.id !== movie.id\n      );\n      Notiflix.Notify.info('movie removed from watched');\n      queueBtn.textContent = 'ADD TO QUEUQ';\n    } else {\n      storedQueueMovies.push(movie);\n      Notiflix.Notify.success('Movie added to watch');\n      queueBtn.textContent = 'REMOVE FROM QUEUQ';\n    }\n\n    localStorage.setItem('queueMovies', JSON.stringify(storedQueueMovies));\n  });\n}\n\nfunction clearValue() {\n  inputElement.value = '';\n}\n"],"names":["$bpxeT","parcelRequire","$44ae6d9db4eaca0f$var$container","document","querySelector","$44ae6d9db4eaca0f$var$form","$44ae6d9db4eaca0f$var$inputElement","$44ae6d9db4eaca0f$var$formTextContainer","$44ae6d9db4eaca0f$var$BASE_URL","$44ae6d9db4eaca0f$var$KEY","addEventListener","evt","$44ae6d9db4eaca0f$var$_fetchSerchForm","apply","this","arguments","$44ae6d9db4eaca0f$var$genres","$44ae6d9db4eaca0f$var$fetchMovie","inputValue","$44ae6d9db4eaca0f$var$_fetchMovie","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","default","get","concat","params","api_key","query","page","_ctx","sent","data","console","error","t0","$44ae6d9db4eaca0f$var$fetchMovieDetails","movieId","$44ae6d9db4eaca0f$var$_fetchMovieDetails","$6JpON","Report","_callee1","movies","preventDefault","value","toLowerCase","trim","_ctx1","results","length","innerHTML","Notify","info","setTimeout","$44ae6d9db4eaca0f$var$renderMovie","$44ae6d9db4eaca0f$var$clearValue","event","movieElement","target","closest","dataset","id","$44ae6d9db4eaca0f$var$showModal","failure","$44ae6d9db4eaca0f$var$_renderMovie","movieHTML","filter","movie","poster_path","map","original_title","Date","release_date","getFullYear","genre_ids","join","vote_average","vote_count","popularity","Array","isArray","genres","genre","name","overview","style","display","watchedBtn","queueBtn","JSON","parse","localStorage","getItem","some","storedMovie","textContent","storedMovies","push","success","setItem","stringify","storedQueueMovies","$44ae6d9db4eaca0f$var$click"],"version":3,"file":"index.8b76f28c.js.map"}