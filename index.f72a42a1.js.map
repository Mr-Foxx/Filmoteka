{"mappings":"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","sources":["src/js/index.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n// import $ from 'jquery';\n// import Pagination from 'paginationjs';\n// import 'paginationjs/dist/pagination.min.js';\n\nconst container = document.querySelector('.gallery-start');\nconst form = document.querySelector('.search-form');\nconst inputElement = document.querySelector('input[name=\"searchQuery\"]');\nconst formTextContainer = document.querySelector('.form-text');\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '9658d89d84efdefd667887b926d66a88';\n\nform.addEventListener('submit', fetchSerchForm);\n\nconst genres = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nasync function fetchMovie(inputValue) {\n  try {\n    const response = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        api_key: KEY,\n        query: inputValue,\n        page: 1,\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('There was an error!', error);\n    throw error;\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    Notiflix.Report('Error', 'An error occurred while fetching movie details');\n  }\n}\n\nasync function fetchSerchForm(evt) {\n  evt.preventDefault();\n\n  const inputValue = inputElement.value.toLowerCase().trim();\n\n  try {\n    const movies = await fetchMovie(inputValue);\n\n    if (movies.results.length === 0) {\n      formTextContainer.innerHTML =\n        'Search result not successful.<br/> Enter the correct movie name.';\n\n      Notiflix.Notify.info('Sorry, but nothing was found for your request');\n      setTimeout(function () {\n        formTextContainer.innerHTML = '';\n      }, 3000);\n    } else {\n      renderMovie(movies);\n      clearValue();\n\n      // додати обробник події на контейнер з фільмами\n      container.addEventListener('click', async event => {\n        const movieElement = event.target.closest('.img-start');\n        if (movieElement) {\n          const movieId = movieElement.dataset.id;\n          const movie = await fetchMovieDetails(movieId);\n          showModal(movie);\n        }\n      });\n    }\n  } catch (error) {\n    Notiflix.Notify.failure(error);\n    throw error;\n  }\n}\n\nasync function renderMovie(movies) {\n  const movieHTML = movies.results\n    .filter(movie => movie.poster_path) // фільтруємо тільки фільми з постером\n    .map(\n      movie => `\n      <div class=\"movie-start_container\">\n        <div class=\"movie-start\">\n          ${\n            movie.poster_path\n              ? `<img class=\"img-start\" data-id=\"${\n                  movie.id\n                }\" src=\"https://image.tmdb.org/t/p/w500${\n                  movie.poster_path\n                }\" alt=\"${movie.original_title || 'Movie Poster'} Poster\" />`\n              : ''\n          }\n          <div class=\"movie-details_start\">\n            <h2>${movie.original_title}</h2>\n            <p> ${new Date(movie.release_date).getFullYear()}</p>\n            <p> ${movie.genre_ids.map(id => genres[id]).join(', ')}</p>\n          </div>\n        </div>\n      </div>\n    `\n    )\n    .join('');\n\n  container.innerHTML = movieHTML;\n}\n\n// ======modal=====\n\nfunction showModal(movie) {\n  const modalDetails = document.querySelector('.movie-details_modal');\n\n  modalDetails.innerHTML = `\n    <div class=\"modal__list\">\n      <img class=\"img-modal\" src=\"https://image.tmdb.org/t/p/w500${\n        movie.poster_path\n      }\" alt=\"${movie.original_title} Poster\">\n      <div class=\"modal__text\">\n        <h2>${movie.original_title}</h2>\n        <p>Vote / Votes: ${movie.vote_average} / ${movie.vote_count}</p>\n        <p>Popularity: ${movie.popularity}</p>\n        <p>Original Title: ${movie.original_title}</p>\n        <p>Genre: ${\n          Array.isArray(movie.genres)\n            ? movie.genres.map(genre => genre.name).join(', ')\n            : ''\n        }</p>\n        <p class=\"abaut\"> ABOUT </p> \n        <p>  Description: ${movie.overview}</p> <!-- Доданий опис -->\n        <div class=\"modal__buttons\"> \n          <button class=\"modal__button-watched\">ADD TO WATCHED</button>\n          <button class=\"modal__button-queue\">ADD TO QUEUE</button>\n        </div>\n      </div>\n    </div>\n  `;\n\n  const modal = document.querySelector('.modal');\n  modal.style.display = 'block';\n\n  click(movie);\n}\n\nfunction click(movie) {\n  const watchedBtn = document.querySelector('.modal__button-watched');\n  const queueBtn = document.querySelector('.modal__button-queue');\n\n  // =watchedBtn при натисканні на кнопку первіряє по ід чи є фільм в локал та змінює напис кнопки\n\n  const storedWatchedMovies =\n    JSON.parse(localStorage.getItem('watchMovies')) || [];\n\n  const isWatchedMovieExists = storedWatchedMovies.some(\n    storedMovie => storedMovie.id === movie.id\n  );\n  if (isWatchedMovieExists) {\n    watchedBtn.textContent = 'REMOVE FROM WATCHED';\n  } else {\n    watchedBtn.textContent = 'ADD TO WATCHED';\n  }\n\n  watchedBtn.addEventListener('click', () => {\n    let storedMovies = JSON.parse(localStorage.getItem('watchMovies')) || [];\n\n    const isMovieExists = storedMovies.some(\n      storedMovie => storedMovie.id === movie.id\n    );\n\n    if (isMovieExists) {\n      storedMovies = storedMovies.filter(\n        storedMovie => storedMovie.id !== movie.id\n      );\n      Notiflix.Notify.info('movie removed from watched');\n      watchedBtn.textContent = 'ADD TO WATCHED';\n    } else {\n      storedMovies.push(movie);\n      Notiflix.Notify.success('Movie added to watch');\n      watchedBtn.textContent = 'REMOVE FROM WATCHED';\n    }\n\n    localStorage.setItem('watchMovies', JSON.stringify(storedMovies));\n  });\n\n  // = queueBtn\n\n  const storedQueueMovies =\n    JSON.parse(localStorage.getItem('queueMovies')) || [];\n\n  const isQueueMovieExists = storedQueueMovies.some(\n    storedMovie => storedMovie.id === movie.id\n  );\n  if (isQueueMovieExists) {\n    queueBtn.textContent = 'REMOVE FROM WATCHED';\n  } else {\n    queueBtn.textContent = 'ADD TO WATCHED';\n  }\n\n  queueBtn.addEventListener('click', () => {\n    let storedQueueMovies =\n      JSON.parse(localStorage.getItem('queueMovies')) || [];\n\n    const isMovieExists = storedQueueMovies.some(\n      storedMovie => storedMovie.id === movie.id\n    );\n\n    if (isMovieExists) {\n      storedQueueMovies = storedQueueMovies.filter(\n        storedMovie => storedMovie.id !== movie.id\n      );\n      Notiflix.Notify.info('movie removed from watched');\n      queueBtn.textContent = 'ADD TO QUEUQ';\n    } else {\n      storedQueueMovies.push(movie);\n      Notiflix.Notify.success('Movie added to watch');\n      queueBtn.textContent = 'REMOVE FROM QUEUQ';\n    }\n\n    localStorage.setItem('queueMovies', JSON.stringify(storedQueueMovies));\n  });\n}\n\nfunction clearValue() {\n  inputElement.value = '';\n}\n"],"names":["$2shzp","parcelRequire","$85a5f86b715fe7db$var$container","document","querySelector","$85a5f86b715fe7db$var$form","$85a5f86b715fe7db$var$inputElement","$85a5f86b715fe7db$var$formTextContainer","addEventListener","async","evt","preventDefault","inputValue","value","toLowerCase","trim","movies","default","get","params","api_key","query","page","data","error","console","$85a5f86b715fe7db$var$fetchMovie","results","length","innerHTML","$parcel$interopDefault","$7Y9D8","Notify","info","setTimeout","movieHTML","filter","movie","poster_path","map","id","original_title","Date","release_date","getFullYear","genre_ids","$85a5f86b715fe7db$var$genres","join","$85a5f86b715fe7db$var$renderMovie","event","movieElement","target","closest","movieId","dataset","Report","$85a5f86b715fe7db$var$fetchMovieDetails","vote_average","vote_count","popularity","Array","isArray","genres","genre","name","overview","style","display","watchedBtn","queueBtn","storedWatchedMovies","JSON","parse","localStorage","getItem","some","storedMovie","textContent","storedMovies","push","success","setItem","stringify","storedQueueMovies1","storedQueueMovies","$85a5f86b715fe7db$var$click","$85a5f86b715fe7db$var$showModal","failure"],"version":3,"file":"index.f72a42a1.js.map"}