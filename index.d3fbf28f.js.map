{"mappings":"qhBAAAA,EAAA,S,6CCCAC,EAAAD,EAAA,SAIA,MAAME,EAAeC,SAASC,eAAe,4BAE7C,IACIC,EAAc,EAGlB,SAASC,EAAiBC,EAAO,EAAGC,GAClCC,EAAQC,WALO,KAMfD,EAAQE,KAAOJ,EACf,IAAIK,EAAa,IAAIC,EAAAZ,GAAJ,CAAeC,EAAcO,GAI1CD,EACFI,EAAWE,GAAG,cAAcC,OAAOJ,KAAEA,MAEnCK,QADqBC,EAAYT,IAEjCU,OAAOC,OAAO,CACZC,IAAK,EACLC,SAAU,UACV,IAGJT,EAAWE,GAAG,cAAc,EAACH,KAAEA,MAC7BK,EAAaL,GACbO,OAAOC,OAAO,CACZC,IAAK,EACLC,SAAU,UACV,IAINT,EAAWE,GAAG,cAAcC,MAAMO,IAChCjB,EAAciB,EAAMX,KAEpBK,QADqBC,EAAYZ,IAGjCa,OAAOK,SAAS,EAAG,EAAE,G,CAIzB,MAAMd,EAAU,CACdC,WAAY,IACZc,aAAc,GACdC,aAAc,EACdd,KAAM,EACNe,aAAa,EACbC,mBAAoB,kBACpBC,kBAAmB,iBACnBC,SAAU,CACRlB,KAAM,4DACNmB,YACE,iEACFC,WACE,+GAGFC,mBACE,gHAGFC,WACE,kH,iBD1DN,MAAMC,EAAY/B,SAASgC,cAAc,kBAUlCpB,eAAeE,EAAYN,EAAO,GACvC,IAQE,aAJuByB,EAAAC,QAAMC,IAC3B,gGAAoD3B,MAGtC4B,KAAKC,O,CACrB,MAAOC,GAEP,MADAC,QAAQD,MAAMA,GACR,IAAIE,MAAM,wB,EAIb,SAAS3B,EAAa4B,GAC3B,MAAMC,EAAYD,EACfE,KACCC,GAAS,mJAILA,EAAMC,qBACED,EAAME,uFAERF,EAAME,sCACN,IAAIC,KAAKH,EAAMI,cAAcC,oCAC7BL,EAAMM,UAAUP,KAAIQ,GAAMC,EAAAC,OAAOF,KAAKG,KAAK,8DAMtDA,KAAK,IAERvB,EAAUwB,UAAYb,EAEG1C,SAASwD,iBAAiB,cAClCC,SAAQ,CAACC,EAAiBC,KACzCD,EAAgBE,iBAAiB,SAAS,MACxC,EAAAC,EAAAC,WAAUrB,EAAOkB,GAAO,GACxB,IAGiB3D,SAASgC,cAAc,mBAC/B4B,iBAAiB,SAAS,KACvB5D,SAASgC,cAAc,UAC/B+B,MAAMC,QAAU,MAAM,G,CAyKhCzB,QAAQ0B,IAAI,cAEZrD,iBAEEC,QADqBC,KAGrBX,EAAiB,EAAG,K,CAGtB+D,GAEA/D,EAxOiB,KACC,GAwLyBS,eAAVJ,EAAO,GACtC,IACE,MAAMiC,QAAe3B,IACrBD,EAAa4B,GACbtC,EAAiBsC,EAAO0B,cAAe3D,GAWL,SAANiC,GACLzC,SAASwD,iBAAiB,cAElCC,SAAQ,CAACC,EAAiBC,KACzCD,EAAgBE,iBAAiB,SAAShD,UACxC,MAAMwD,QAnJZxD,eAAiCyD,GAC/B,IAIE,aAHuBpC,EAAAC,QAAMC,IAC3B,sCAAsCkC,+CAExBjC,I,CAChB,MAAOE,GAEP,MADAC,QAAQD,MAAMA,GACR,IAAIE,MAAM,+B,EA2Ia8B,CAAkB7B,EAAOkB,GAAOR,KAC3D,EAAAU,EAAAC,WAAUM,EAAa,GACvB,G,CAhBFG,CAAuB9B,GAsBJzC,SAASgC,cAAc,mBAE/B4B,iBAAiB,SAAS,KACvB5D,SAASgC,cAAc,UAC/B+B,MAAMC,QAAU,MAAM,G,CAxB5B,MAAO1B,GAEP,MADAC,QAAQD,MAAMA,GACR,IAAIE,MAAM,+B,EAsCpBgC,GAEAjC,QAAQ0B,IAAI","sources":["src/js/fetch_start.js","src/js/pagination.js"],"sourcesContent":["import Pagination from 'tui-pagination';\nimport 'tui-pagination/dist/tui-pagination.css';\nimport axios from 'axios';\n\nimport Notiflix from 'notiflix';\nimport { genres } from './genres';\nimport { paginationRender } from './pagination';\nimport { showModal } from './showModal';\n\nconst container = document.querySelector('.gallery-start');\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '9658d89d84efdefd667887b926d66a88';\n\n// ==\nlet totalItems = 1200;\nlet currentPage = 1;\nlet query = null;\n// ==\nexport async function fetchMovies(page = 1) {\n  try {\n    // const response = await axios.get(\n    //   `${BASE_URL}movie/now_playing?api_key=${KEY}`\n    // );\n    const response = await axios.get(\n      `${BASE_URL}movie/now_playing?api_key=${KEY}&page=${page}`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error fetching movies');\n  }\n}\n\nexport function renderMovies(movies) {\n  const movieHTML = movies\n    .map(\n      movie => `\n    <div class=\"movie-start_container\">\n      <div class=\"movie-start\">\n        <img class='img-start'  src=\"https://image.tmdb.org/t/p/w500${\n          movie.poster_path\n        }\" alt=\"${movie.original_title} Poster\" />\n        <div class=\"movie-details_start\">\n          <h2>${movie.original_title}</h2>\n          <p> ${new Date(movie.release_date).getFullYear()}</p>\n          <p> ${movie.genre_ids.map(id => genres[id]).join(', ')}</p>\n        </div>\n      </div>\n    </div>\n    `\n    )\n    .join('');\n\n  container.innerHTML = movieHTML;\n\n  const imgStartElements = document.querySelectorAll('.img-start');\n  imgStartElements.forEach((imgStartElement, index) => {\n    imgStartElement.addEventListener('click', () => {\n      showModal(movies[index]);\n    });\n  });\n\n  const modalOverlay = document.querySelector('.modal__overlay');\n  modalOverlay.addEventListener('click', () => {\n    const modal = document.querySelector('.modal');\n    modal.style.display = 'none';\n  });\n}\n\n// ================\n\nasync function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error fetching movie details');\n  }\n}\n\n// =\n\n// function click(movie) {\n//   const watchedBtn = document.querySelector('.modal__button-watched');\n//   const queueBtn = document.querySelector('.modal__button-queue');\n\n//   // =watchedBtn при натисканні на кнопку первіряє по ід чи є фільм в локал та змінює напис кнопки\n\n//   const storedWatchedMovies =\n//     JSON.parse(localStorage.getItem('watchMovies')) || [];\n\n//   const isWatchedMovieExists = storedWatchedMovies.some(\n//     storedMovie => storedMovie.id === movie.id\n//   );\n//   if (isWatchedMovieExists) {\n//     watchedBtn.textContent = 'REMOVE FROM WATCHED';\n//   } else {\n//     watchedBtn.textContent = 'ADD TO WATCHED';\n//   }\n\n//   watchedBtn.addEventListener('click', () => {\n//     let storedMovies = JSON.parse(localStorage.getItem('watchMovies')) || [];\n\n//     const isMovieExists = storedMovies.some(\n//       storedMovie => storedMovie.id === movie.id\n//     );\n\n//     if (isMovieExists) {\n//       storedMovies = storedMovies.filter(\n//         storedMovie => storedMovie.id !== movie.id\n//       );\n//       Notiflix.Notify.info('movie removed from watched');\n//       watchedBtn.textContent = 'ADD TO WATCHED';\n//     } else {\n//       storedMovies.push(movie);\n//       Notiflix.Notify.success('Movie added to watch');\n//       watchedBtn.textContent = 'REMOVE FROM WATCHED';\n//     }\n\n//     localStorage.setItem('watchMovies', JSON.stringify(storedMovies));\n//   });\n\n//   // = queueBtn\n\n//   const storedQueueMovies =\n//     JSON.parse(localStorage.getItem('queueMovies')) || [];\n\n//   const isQueueMovieExists = storedQueueMovies.some(\n//     storedMovie => storedMovie.id === movie.id\n//   );\n//   if (isQueueMovieExists) {\n//     queueBtn.textContent = 'REMOVE FROM WATCHED';\n//   } else {\n//     queueBtn.textContent = 'ADD TO WATCHED';\n//   }\n\n//   queueBtn.addEventListener('click', () => {\n//     let storedQueueMovies =\n//       JSON.parse(localStorage.getItem('queueMovies')) || [];\n\n//     const isMovieExists = storedQueueMovies.some(\n//       storedMovie => storedMovie.id === movie.id\n//     );\n\n//     if (isMovieExists) {\n//       storedQueueMovies = storedQueueMovies.filter(\n//         storedMovie => storedMovie.id !== movie.id\n//       );\n//       Notiflix.Notify.info('movie removed from watched');\n//       queueBtn.textContent = 'ADD TO QUEUQ';\n//     } else {\n//       storedQueueMovies.push(movie);\n//       Notiflix.Notify.success('Movie added to watch');\n//       queueBtn.textContent = 'REMOVE FROM QUEUQ';\n//     }\n\n//     localStorage.setItem('queueMovies', JSON.stringify(storedQueueMovies));\n//   });\n// }\n\n// function showModal(movie) {\n//   const modalDetails = document.querySelector('.movie-details_modal');\n\n//   modalDetails.innerHTML = `\n//     <div class=\"modal__list\">\n//       <img class=\"img-modal\" src=\"https://image.tmdb.org/t/p/w500${\n//         movie.poster_path\n//       }\" alt=\"${movie.original_title} Poster\">\n//       <div class=\"modal__text\">\n//         <h2>${movie.original_title}</h2>\n//         <p>Vote / Votes: ${movie.vote_average} / ${movie.vote_count}</p>\n//         <p>Popularity: ${movie.popularity}</p>\n//         <p>Original Title: ${movie.original_title}</p>\n//         <p>Genre: ${\n//           Array.isArray(movie.genres)\n//             ? movie.genres.map(genre => genre.name).join(', ')\n//             : ''\n//         }</p>\n//         <p class=\"abaut\"> ABOUT </p>\n//         <p>Description: ${movie.overview}</p> <!-- Доданий опис -->\n//         <div class=\"modal__buttons\">\n//           <button class=\"modal__button-watched\">ADD TO WATCHED</button>\n//           <button class=\"modal__button-queue\">ADD TO QUEUE</button>\n//         </div>\n//       </div>\n//     </div>\n//   `;\n\n//   const modal = document.querySelector('.modal');\n//   modal.style.display = 'block';\n\n//   click(movie);\n// }\n\n// Функція, що отримує список фільмів та відображає їх\nasync function renderStartMovies(page = 1) {\n  try {\n    const movies = await fetchMovies();\n    renderMovies(movies);\n    paginationRender(movies.total_results, page);\n\n    addClickEventListeners(movies);\n    addOverlayClickListener();\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error rendering start movies');\n  }\n}\n\n// Функція, що додає події на зображення фільмів\nfunction addClickEventListeners(movies) {\n  const imgStartElements = document.querySelectorAll('.img-start');\n\n  imgStartElements.forEach((imgStartElement, index) => {\n    imgStartElement.addEventListener('click', async () => {\n      const movieDetails = await fetchMovieDetails(movies[index].id);\n      showModal(movieDetails);\n    });\n  });\n}\n\n// Функція, що додає подію на клік по оверлею модального вікна\nfunction addOverlayClickListener() {\n  const modalOverlay = document.querySelector('.modal__overlay');\n\n  modalOverlay.addEventListener('click', () => {\n    const modal = document.querySelector('.modal');\n    modal.style.display = 'none';\n  });\n}\n\nconsole.log('start-page');\n\nasync function init() {\n  const movies = await fetchMovies();\n  renderMovies(movies);\n\n  paginationRender(1, null);\n}\n\ninit();\n\npaginationRender(totalItems, currentPage, query);\nrenderStartMovies();\n\nconsole.log('start-page after function');\n\n// export default fetchMovies;\n// export default renderMovies\n// =================\n","// =\nimport Pagination from 'tui-pagination';\nimport 'tui-pagination/dist/tui-pagination.css';\nimport { fetchMovies, renderMovies } from './fetch_start';\n\nconst containerTui = document.getElementById('tui-pagination-container');\n\nlet totalItems = 1200;\nlet currentPage = 1;\nlet query = null;\n\nfunction paginationRender(page = 1, query) {\n  options.totalItems = totalItems;\n  options.page = page;\n  let pagination = new Pagination(containerTui, options);\n\n  // query = query || null;\n\n  if (query) {\n    pagination.on('beforeMove', async ({ page }) => {\n      const movies = await fetchMovies(query, page);\n      renderMovies(movies);\n      window.scroll({\n        top: 0,\n        behavior: 'smooth',\n      });\n    });\n  } else {\n    pagination.on('beforeMove', ({ page }) => {\n      renderMovies(page);\n      window.scroll({\n        top: 0,\n        behavior: 'smooth',\n      });\n    });\n  }\n\n  pagination.on('beforeMove', async event => {\n    currentPage = event.page;\n    const movies = await fetchMovies(currentPage);\n    renderMovies(movies);\n\n    window.scrollTo(0, 0);\n  });\n}\n\nconst options = {\n  totalItems: 20000,\n  itemsPerPage: 20,\n  visiblePages: 5,\n  page: 1,\n  centerAlign: true,\n  firstItemClassName: 'tui-first-child',\n  lastItemClassName: 'tui-last-child',\n  template: {\n    page: '<a href=\"page={{page}}\" class=\"tui-page-btn\">{{page}}</a>',\n    currentPage:\n      '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n    moveButton:\n      '<a href=\"page={{page}}\" class=\"tui-page-btn tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</a>',\n    disabledMoveButton:\n      '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</span>',\n    moreButton:\n      '<a href=\"page={{page}}\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' +\n      '<span class=\"tui-ico-ellip\">...</span>' +\n      '</a>',\n  },\n};\n\nexport { paginationRender };\n"],"names":["parcelRequire","$fb9GJ","$1bab9c519cfa82bc$var$containerTui","document","getElementById","$1bab9c519cfa82bc$var$currentPage","$1bab9c519cfa82bc$export$5fcd9471792c11c9","page1","query1","$1bab9c519cfa82bc$var$options","totalItems","page","pagination","$parcel$interopDefault","on","async","$382cadd4203bece9$export$1a30573fde3dfc62","$382cadd4203bece9$export$88181abcadffafee","window","scroll","top","behavior","event","scrollTo","itemsPerPage","visiblePages","centerAlign","firstItemClassName","lastItemClassName","template","currentPage","moveButton","disabledMoveButton","moreButton","$382cadd4203bece9$var$container","querySelector","$2shzp","default","get","data","results","error","console","Error","movies","movieHTML","map","movie","poster_path","original_title","Date","release_date","getFullYear","genre_ids","id","$ezyJp","genres","join","innerHTML","querySelectorAll","forEach","imgStartElement","index","addEventListener","$dKThO","showModal","style","display","log","$382cadd4203bece9$var$init","total_results","movieDetails","movieId","$382cadd4203bece9$var$fetchMovieDetails","$382cadd4203bece9$var$addClickEventListeners","$382cadd4203bece9$var$renderStartMovies"],"version":3,"file":"index.d3fbf28f.js.map"}